{"version":3,"sources":["logo.svg","services/ApiClient.js","components/ChallengeComponent.js","App.js","reportWebVitals.js","index.js"],"names":["ApiClient","fetch","SERVER_URL","GET_CHALLENGE","user","a","b","guess","POST_RESULT","method","headers","body","JSON","stringify","userAlias","factorA","factorB","ChallengeComponent","props","state","message","handleSubmitResult","bind","handleChange","challenge","then","res","ok","json","setState","updateMessage","event","name","target","this","value","preventDefault","sendGuess","correct","resultAttempt","m","onSubmit","type","maxLength","onChange","min","React","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAAe,I,+CCATA,E,8FAMF,WACI,OAAOC,MAAMD,EAAUE,WAAaF,EAAUG,iB,uBAGlD,SAAiBC,EACAC,EACAC,EACAC,GACb,OAAON,MAAMD,EAAUE,WAAaF,EAAUQ,YAAY,CACtDC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UACP,CACIC,UAAWV,EACXW,QAASV,EACTW,QAASV,EACTC,MAAOA,U,KAxBrBP,EAEKE,WAAa,wBAFlBF,EAGKG,cAAgB,qBAHrBH,EAIKQ,YAAc,YA0BVR,Q,OCyEAiB,E,kDAlGX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTd,EAAG,GAAIC,EAAG,GACVF,KAAM,GACNgB,QAAS,GACTb,MAAO,GAEX,EAAKc,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATL,E,qDAYnB,WAA2B,IAAD,OACtBtB,EAAUwB,YAAYC,MAClB,SAAAC,GACQA,EAAIC,GACJD,EAAIE,OAAOH,MAAK,SAAAG,GACZ,EAAKC,SAAS,CACVxB,EAAGuB,EAAKb,QACRT,EAAGsB,EAAKZ,aAIhB,EAAKc,cAAc,+B,0BAMnC,SAAaC,GACT,IAAMC,EAAOD,EAAME,OAAOD,KAC1BE,KAAKL,SAAL,eACKG,EAAOD,EAAME,OAAOE,U,gCAI7B,SAAmBJ,GAAQ,IAAD,OACtBA,EAAMK,iBACNpC,EAAUqC,UAAUH,KAAKf,MAAMf,KAC3B8B,KAAKf,MAAMd,EAAG6B,KAAKf,MAAMb,EACzB4B,KAAKf,MAAMZ,OACVkB,MAAK,SAAAC,GACEA,EAAIC,GACJD,EAAIE,OAAOH,MAAK,SAAAG,GACRA,EAAKU,QACL,EAAKR,cAAc,0CAEnB,EAAKA,cAAc,oBAAsBF,EAAKW,cAC1C,mCAIZ,EAAKT,cAAc,6C,2BAKnC,SAAcU,GACVN,KAAKL,SAAS,CACVT,QAASoB,M,oBAIjB,WACI,OACI,gCACI,gCACI,wDACA,+BACKN,KAAKf,MAAMd,EADhB,MACsB6B,KAAKf,MAAMb,QAGrC,uBAAMmC,SAAYP,KAAKb,mBAAvB,UACI,gDAEI,uBAAOqB,KAAO,OAAOC,UAAY,KAC1BX,KAAO,OACPG,MAASD,KAAKf,MAAMf,KACpBwC,SAAYV,KAAKX,kBAE5B,uBACA,gDAEI,uBAAOmB,KAAO,SACPG,IAAM,IACNb,KAAO,QACPG,MAASD,KAAKf,MAAMZ,MACpBqC,SAAYV,KAAKX,kBAE5B,uBACA,uBAAOmB,KAAO,SACPP,MAAQ,cAEnB,mCAAMD,KAAKf,MAAMC,QAAjB,c,GA/FiB0B,aCWlBC,MAVf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCIOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5af60938.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","class ApiClient {\r\n\r\n    static SERVER_URL = 'http://localhost:8080';\r\n    static GET_CHALLENGE = '/challenges/random';\r\n    static POST_RESULT = '/attempts';\r\n\r\n    static challenge(): Promise<Response> {\r\n        return fetch(ApiClient.SERVER_URL + ApiClient.GET_CHALLENGE);\r\n    }\r\n\r\n    static sendGuess(user: string,\r\n                     a: number,\r\n                     b: number,\r\n                     guess: number): Promise<Response> {\r\n        return fetch(ApiClient.SERVER_URL + ApiClient.POST_RESULT,{\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(\r\n                {\r\n                    userAlias: user,\r\n                    factorA: a,\r\n                    factorB: b,\r\n                    guess: guess\r\n                }\r\n            )\r\n        });\r\n    }\r\n}\r\nexport default ApiClient;","import * as React from \"react\";\r\nimport ApiClient from \"../services/ApiClient\";\r\n\r\nclass ChallengeComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            a: '', b: '',\r\n            user: '',\r\n            message: '',\r\n            guess: 0\r\n        };\r\n        this.handleSubmitResult = this.handleSubmitResult.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        ApiClient.challenge().then(\r\n            res => {\r\n                if (res.ok) {\r\n                    res.json().then(json => {\r\n                        this.setState({\r\n                            a: json.factorA,\r\n                            b: json.factorB\r\n                        });\r\n                    });\r\n                } else {\r\n                    this.updateMessage(\"Can't reach the server\");\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    handleChange(event) {\r\n        const name = event.target.name;\r\n        this.setState({\r\n            [name]: event.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmitResult(event) {\r\n        event.preventDefault();\r\n        ApiClient.sendGuess(this.state.user,\r\n            this.state.a, this.state.b,\r\n            this.state.guess)\r\n            .then(res => {\r\n                if (res.ok) {\r\n                    res.json().then(json => {\r\n                        if (json.correct) {\r\n                            this.updateMessage(\"Congratulations! Your guess is correct\");\r\n                        } else {\r\n                            this.updateMessage(\"Oops! Your guess \" + json.resultAttempt +\r\n                                \" is wrong, but keep playing!\");\r\n                        }\r\n                    });\r\n                } else {\r\n                    this.updateMessage(\"Error: server error or not available\");\r\n                }\r\n            });\r\n    }\r\n\r\n    updateMessage(m: string) {\r\n        this.setState({\r\n            message: m\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <h3>Your new challenge is </h3>\r\n                    <h1>\r\n                        {this.state.a} x {this.state.b}\r\n                    </h1>\r\n                </div>\r\n                <form onSubmit = {this.handleSubmitResult}>\r\n                    <label>\r\n                        Your alias:\r\n                        <input type = \"text\" maxLength = \"12\"\r\n                               name = \"user\"\r\n                               value = {this.state.user}\r\n                               onChange = {this.handleChange}/>\r\n                    </label>\r\n                    <br/>\r\n                    <label>\r\n                        Your guess:\r\n                        <input type = \"number\"\r\n                               min = \"0\"\r\n                               name = \"guess\"\r\n                               value = {this.state.guess}\r\n                               onChange = {this.handleChange}/>\r\n                    </label>\r\n                    <br/>\r\n                    <input type = \"submit\"\r\n                           value = \"Submit\" />\r\n                </form>\r\n                <h4> {this.state.message} </h4>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default ChallengeComponent;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport ChallengeComponent from \"./components/ChallengeComponent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ChallengeComponent/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}